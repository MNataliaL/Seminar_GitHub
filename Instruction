# Введение в контроль версий

Команды GIT
git init – инициализация локального репозитория
git status – получить информацию от git о его текущем состоянии
git add . – добавит файл к наблюдению
git rm --cached <file> - исключить файл (ранее наблюдаемый) из наблюдения
rm –R <название удаляемого файла>

git add <название файла> – добавить файл или файлы к следующему коммиту
git commit –m «massage» - создание коммита
git commit --amend -m "Добавила файл" – изменить коммит
git commit -am "Добавила первую строку" – добавить файл и сообщение к нему  (конструкция –am: a – add; m – massage)
git log- вывод на экран всех коммитов с из хэш-кодами (выход –из журнала «Q»)
git log –oneline – вывод на экран одной линией

git reflog – просмотреть все версии

git checkout – переход от одного коммита к другому
git checkout <master> - вернуться к актуальному состоянию и продолжить работу
git  diff – увидеть разницу между текущим файлом и закоммиченным файлом

ls -a – просмотреть путь

git config --global user.name «<имя>» - задать имя
git config user.name - проверить имя
git config --global user.email «<почта>» - задать почту
git config user.email «<почта>» - проверить почту

git branch – посмотреть список веток в репозитоории 
git branch <название ветки> - создать новую ветку
git checkout -b <название ветки> - создать новую ветку и сразу перейти в нее
git checkout <название ветки> - прейти к ветке
git branch -d <название ветки> - удалить ветку
cd – сменить депозиторий


clear – очистить терминал

git merge <название папки, из которой «затягиваем» изменения> - затянуть в действующую папку данные из указанной папки
git merge --abort – отмена конфликта
git push -u origin <название ветки> – запушить файл из ветки
git remote –v – показ удаленного пути


функции для работы с файлами через терминал
touch <название.расширение файла> - создание файла с заданным именем и расширением
cat reserve.md – отобразит содержание файла в терминале
статус файла
U – файл впервые создался, не отслеживается
M – 
A – файл добавлен в наблюдение

echo «<что пишем>» > <название файла, в который пишем> - добавить текст в файл через терминал

Для игнорирования файла в папке:
1.	Создаем файл «.gitignore»
2.	Указываем в этом файле названия файлом, подлежащих игноированию
3.	Сохраняем файл
4.	Добавляем к наблюдению 
5.	Добавляем коммит
6.	Проверяем статус: игнорируемые файлы не д. отражаться.
Все файлы, указанные в файле «.gitignore» будут игнорироваться.

## Удаленные репозитории
3.1. Стянуть репозиторий с Git Hub:
Авторизация на GitHub не обязательна
Открываем папку
На Git Hub находим нужный репозиторий
С помощью кнопки «CODE» копируем путь
Командой git clone <скопированный путь> создаем копию на компьютере
Командой cd переходим в новую ветку стянутого  репозитория

3.2. Закинуть репозиторий с компа
Требуется авторизация на GitHub
1.	Создаем на Git Hub репозиторий с помощью кнопки «NEW» или через плюсик вверху справа
2.	в открывшейся страничке копируем путь к новому репозиторию
3.	следуем по одной из трех подсказок: создать новый файл в репозитории, закинуть с компа или скопировать к-л иной репозиторий

3.3.	Внести изменения в чужой репозиторий

1. найти необходимый репозитрий
2. создать fork этого репозитория у себя
3. стянуть pull к себе на комп
4. создать ветку и перейти в нее
4. внести необходимые изменения в файл
5. отправить push изменения в github
6. кнопкой Pull Request отправить для проверки автору проекта


